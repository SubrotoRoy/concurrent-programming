Threads vs Goroutines

A Thread represents the ability for the operating system to run a task. So typical operating systems have
thousands of threads active at a single time. Each of those threads represents something that the OS can be
working on. Its not working on them all, all the time, but it is a task that can be operated on when it 
needs to be.
Thats very simple in concept to a Goroutine

1
==================
Threads have own execution stack. there is a list of instructions that are assigned to that thread and the 
thread starts working on it. Its got its own memory and its own call stack so it knows what its doing as its 
doing it. 

Goroutines are exactly the same in that regard. They have their own execution stack.

2
==================
Threads typically have a fixed stack space thats fixed by the OS when the thread gets created and they are
often around 1 MB. Which means they have lot of room to do local operations and if they need to do very large 
operations they take advantage of the larger memory space called Heap space in order to manage that,
but typically the thread itself has 1MB allocated to it.

Goroutine has a variable stack space that starts around 2 KB, as you can see much much smaller but if they do
need to grow the Goroutine has the ability to increase its stack space to take on more and more local 
operations as needed. so they are generally much more memory efficient than threads are however they have 
little bit of over head associated with them as they have to manage that stack space

3
=========================
Threads are managed directly by the OS. So your programming language requests for threads from the OS and the 
OS itself provides that. 

Goroutines are managed by the go runtime. 